#!/usr/bin/env python3

# ---------------------------------------------------------------------------
#
# oms, a tiny manuscript tool based on the OpenManuscript specification 
#
# ---------------------------------------------------------------------------

"""
Copyright (c) 2020-2024, David H. Rogers 
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

import argparse
import configparser
import os
import textwrap
import openms

ProgName = "oms"


# ---------------------------------------------------------------------------
# set up command line args
# ---------------------------------------------------------------------------
conf_parser = argparse.ArgumentParser(
    # Turn off help, so we print all options in response to -h
    add_help=False
    )

args, remaining_argv = conf_parser.parse_known_args()

desc = """A tool that renders OpenManuscript data in Word (docx) format.
"""
ep = """
Examples:
    oms
        If executed within an OpenManuscript directory, this will use default
        arguments to construct 'manuscript.docx' from 'author.json' and
        'manuscript.json' 
        
    oms --font Times
        If executed within an OpenManuscript directory, this will use default
        arguments to construct 'manuscript.docx' from 'author.json' and
        'manuscript.json', using the font 'Times'

    oms --manuscriptdir mydir

        Given an explicit path to the OpenManuscript data at 'mydir', this will
        use other defaults to render 'manuscript.docx' from 'author.json' and
        'manuscript.json'

    oms --manuscriptdir mydir --authorfile a.json --manuscriptfile m.json --outputfile m.docx 

        Given an explicit path to the OpenManuscript data at 'mydir', this will
        render 'm.docx' using 'a.json' and 'm.json'.

"""
parser = argparse.ArgumentParser(  
                    formatter_class=argparse.RawDescriptionHelpFormatter,
                    parents=[conf_parser],
                    description=textwrap.dedent(desc), 
                    epilog=textwrap.dedent(ep)
                    )

parser.add_argument( "--authorfile", default="author.json",
    help="read author data from this file. Must be located in MANUSCRIPTDIR")
parser.add_argument( "--chapterdesc", action="store_true", default=False, 
    help="print a chapter desc, if there is one")
parser.add_argument( "--chaptersummary", action="store_true", default=False, 
    help="print a chapter summary, if there is one")
parser.add_argument( "--exclude_tags", nargs='+', type=str,
    help="add chapter tags that are considered 'off'")
parser.add_argument( "--filescenesep", action="store_true", default=False, 
    help="print file name as scene separator, instead of ###")
parser.add_argument( "--font", default="Courier", choices=["Courier", "Times"],
    help="Use this font for the manuscript")
parser.add_argument( "--fontsize", default="12", 
    help="Use this font size for the manuscript")
parser.add_argument( "--include_tags", nargs='+', type=str,
    help="add chapter tags that are considered 'on'")
parser.add_argument( "--manuscriptdir", default=".", 
    help="directory that contains the manuscript data")
parser.add_argument( "--manuscriptfile", default="manuscript.json", 
    help="read manuscript definition from this file. Must be located in MANUSCRIPTDIR")
parser.add_argument( "--notes", action="store_true", default=False, 
    help="if there are notes, print them")
parser.add_argument( "--outputfile", default="manuscript.docx", 
    help="write output to this file")
parser.add_argument( "--includesections", nargs='+', type=str,
    help="add scene sections that are considered 'on'") 
parser.add_argument( "--listscenes", action="store_true", default=False, 
    help="list the scenes and exit")
parser.add_argument( "--specversion", action="store_true", default=False,
    help="report the version of OpenManuscript specification this tool supports")
parser.add_argument( "--types", action="store_true", default=False,
    help="report the output data types supported")
parser.add_argument( "--version", action="version", 
                        version=str(openms.core.get_version()) ) 

args = parser.parse_args(remaining_argv)


# -----------------------------------------------------------------------------
#
# execute
#
# -----------------------------------------------------------------------------

# set settings
openms.core.set_authorfile(args.authorfile)
openms.core.set("chapterdesc", args.chapterdesc)
openms.core.set("chaptersummary", args.chaptersummary)
openms.core.set("exclude_tags", args.exclude_tags)
openms.core.set("filescenesep", args.filescenesep)
openms.core.set("font", args.font)
openms.core.set("fontsize", args.fontsize)
openms.core.set("includesections", args.includesections)
openms.core.set("include_tags", args.include_tags)
openms.core.set_manuscriptdir(args.manuscriptdir)
openms.core.set_manuscriptfile(args.manuscriptfile)
openms.core.set("notes", args.notes)
openms.core.set("outputfile", args.outputfile)

if args.specversion:
    print(openms.core.get_spec_version())
    exit(0)

if args.types:
    print("docx")
    exit(0)

# check existence of the files we will need
if not os.path.isfile(openms.core.get_authorfile()):
    print("ERROR: cannot open file: " + openms.core.get_authorfile())
    exit(1)

if not os.path.isfile( openms.core.get_manuscriptfile() ):
    print("ERROR: cannot open file: " + openms.core.get_manuscriptfile())
    exit(1)

# do everything
# At the moment, this tool only provides feedback on command line options

if args.listscenes:
    scenes = openms.core.get_scenelist()
    for scene in scenes:
        print(scene)
    exit(0)

output_type = openms.core.get_output_type()

if (output_type == "docx"):
    openms.core.read_data()
    openms.docx.write( args.outputfile )

else:
    print("ERROR: cannot write output file of type \'{}\'".format(output_type))
    exit(1)


