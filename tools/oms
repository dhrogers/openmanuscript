#!/usr/bin/env python3

# ---------------------------------------------------------------------------
#
# oms, a tiny manuscript tool based on the OpenManuscript specification 
#
# ---------------------------------------------------------------------------

"""
Copyright (c) 2020-2024, David H. Rogers 
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

import argparse
import configparser
import os
import openms


# ---------------------------------------------------------------------------
#
# get initial settings from settings file, if there is one
#
# ---------------------------------------------------------------------------
conf_parser = argparse.ArgumentParser(
    # Turn off help, so we print all options in response to -h
    add_help=False
    )

args, remaining_argv = conf_parser.parse_known_args()

# ---------------------------------------------------------------------------
#
# command line options
#
# ---------------------------------------------------------------------------
# Don't surpress add_help here so it will handle -h
parser = argparse.ArgumentParser(
    # Don't mess with format of description
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    # Inherit options from config_parser
    parents=[conf_parser]
)

# parser.set_defaults(**defaults)
parser.add_argument( "--authorfile", default="author.json",
    help="read author data from this file. Must be located in MANUSCRIPTDIR")
parser.add_argument( "--chaptersummary", action="store_true", default=False, 
    help="print a chapter summary, if there is one")
parser.add_argument( "--filescenesep", action="store_true", default=False, 
    help="print file name as scene separator, instead of ###")
parser.add_argument( "--font", default="Courier", choices=["Courier", "Times"],
    help="Use this font for the manuscript")
parser.add_argument( "--fontsize", default="12", 
    help="Use this font size for the manuscript")
parser.add_argument( "--manuscriptdir", default=".", 
    help="directory that contains the manuscript data")
parser.add_argument( "--manuscriptfile", default="manuscript.json", 
    help="read manuscript definition from this file. Must be located in MANUSCRIPTDIR")
parser.add_argument( "--notes", action="store_true", default=False, 
    help="if there are notes, print them")
parser.add_argument( "--outputfile", default="manuscript.docx", 
    help="write output to this file")
parser.add_argument( "--quote", action="store_true", default=False, 
    help="if there is a quote, include it at the beginning")
parser.add_argument( "--quotefile", default="quotes.md", 
    help="read quote from this file")
parser.add_argument( "--specversion", action="store_true", default=False,
    help="report the version of OpenManuscript specification this tool supports")
parser.add_argument( "--synopsis", action="store_true", default=False, 
    help="if there is a synopsis, include it at the beginning")
parser.add_argument( "--synopsisfile", default="synopsis.md", 
    help="read synopsis from this file")
parser.add_argument( "--tags", nargs='+', type=str,
    help="add chapter tags that are considered 'on'")
parser.add_argument( "--types", action="store_true", default=False,
    help="report the output data types supported")
parser.add_argument( "--version", action="version", 
                        version=str(openms.core.get_version()) ) 
parser.add_argument( "--underline", action="store_true", default=False, 
    help="instead of bold or italic, use underline to show emphasis")

args = parser.parse_args(remaining_argv)


# -----------------------------------------------------------------------------
#
# execute
#
# -----------------------------------------------------------------------------

# set settings
openms.core.set_authorfile(args.authorfile)
openms.core.set("chaptersummary", args.chaptersummary)
openms.core.set("filescenesep", args.filescenesep)
openms.core.set("notes", args.notes)
openms.core.set("font", args.font)
openms.core.set("fontsize", args.fontsize)
openms.core.set_manuscriptdir(args.manuscriptdir)
openms.core.set_manuscriptfile(args.manuscriptfile)
openms.core.set("outputfile", args.outputfile)
openms.core.set("quote", args.quote)
openms.core.set("quotefile", args.quotefile)
openms.core.set("synopsis", args.synopsis)
openms.core.set("synopsisfile", args.synopsisfile)
openms.core.set("tags", args.tags)
openms.core.set("underline", args.underline)

if args.specversion:
    print(openms.core.get_spec_version())
    exit(0)

if args.types:
    print("docx")
    exit(0)

# check existence of the files we will need
if not os.path.isfile(openms.core.get_authorfile()):
    print("ERROR: cannot open file: " + openms.core.get_authorfile())
    exit(0)

if not os.path.isfile( openms.core.get_manuscriptfile() ):
    print("ERROR: cannot open file: " + openms.core.get_manuscriptfile())
    exit(0)

# do everything
# At the moment, this tool only provides feedback on command line options

output_type = openms.core.get_output_type()

if (output_type == "docx"):
    openms.core.read_data()
    openms.docx.write( args.outputfile )

else:
    print("ERROR: cannot write output file of type \'{}\'".format(output_type))
    exit(1)


